import qualified IPPrint
import qualified Language.Haskell.HsColour as HsColour
import qualified Language.Haskell.HsColour.Colourise as HsColour
import qualified Language.Haskell.HsColour.Output as HsColour
import Control.Applicative ((<$>))
import qualified System.Directory
import System.FilePath ((</>))

:seti -XNoMonomorphismRestriction

let myColourPrefs = HsColour.defaultColourPrefs { HsColour.conid = [HsColour.Foreground HsColour.Magenta], HsColour.conop = [HsColour.Foreground HsColour.Yellow], HsColour.string = [HsColour.Foreground HsColour.Green], HsColour.char = [HsColour.Foreground HsColour.Red], HsColour.number = [HsColour.Foreground HsColour.Red], HsColour.layout = [HsColour.Foreground HsColour.White], HsColour.keyglyph = [HsColour.Foreground HsColour.White] }

let myPrint = putStrLn . HsColour.hscolour (HsColour.TTYg HsColour.XTerm256Compatible) myColourPrefs False False "" False . IPPrint.pshow :: Show a => a -> IO ()

:seti -interactive-print=myPrint

-- :set +t

:set prompt "\ESC[34mÎ» \ESC[m"

let ghciEscapeShellArg arg = "'" ++ concatMap (\c -> if c == '\'' then "'\"'\"'" else [c]) arg  ++ "'"

:def! search return . (":! hoogle --color " ++) . ghciEscapeShellArg
:def! doc return . (":! hoogle --info --color " ++) . ghciEscapeShellArg
:def! source readFile
:def! rdot \s -> (readFile =<< ((</> ".ghci") <$> System.Directory.getHomeDirectory))
